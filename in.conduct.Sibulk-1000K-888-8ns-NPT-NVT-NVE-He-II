
dimension    3

units        real # si

atom_style   atomic 

boundary     p p p




variable    T equal 1000 # K 
variable    P equal 0 # Pressure

variable    massSi equal 28.085 # amu 

variable    lattice equal 5.430710 # Angstoms

variable    dt equal 1 # femtosecont 
variable    V  equal vol


variable    p equal 100 # 20 #00     # correlation length

variable    s equal 1      # sample interval

variable    d equal $s*1 # $p*$s   # dump interval

variable    ninitialize equal 800000 # 1000000 # 

variable    nrun equal 8000000 # $d*1000 # integer is the number of data set

variable    nsaveposition equal 10000




variable    Tdamp equal 100.0 # (femtoseconds)
variable    Pdamp equal 1000.0 # ()

variable    kB equal 1.3806504e-23    # [J/K] Boltzmann

variable    A2m equal 1.0e-10 # Angstrom to meters

variable    fs2s equal 1.0e-15 # picoseconds to seconds 

variable    kcal2j equal 4184/6.022e23 #kcal/mol to joules

variable    Lb equal 8.0*${lattice}  # bulk Si unit cell length
variable    delta equal ${Lb}-0.001*${lattice}

# setup problem ------------------------------------------------------------

region       box block 0.0 ${Lb} 0.0 ${Lb} 0.0 ${Lb}   # Si Bulk

create_box   1 box
# region      deltaX block ${delta} ${Lb} INF INF INF INF units box
# geometry -----------------------------------------------------------------

lattice      diamond ${lattice}

create_atoms 1 region box
# delete_atoms region deltaX


mass         1 ${massSi}

pair_style   sw

pair_coeff   * * Si.sw.real Si


timestep     ${dt}

thermo      $d

# equilibration and thermalization -----------------------------------------

velocity     all create $T 212486 dist gaussian



compute      myKE all ke/atom

compute      myPE all pe/atom

compute      myStress all stress/atom NULL virial

compute      flux all heat/flux myKE myPE myStress

variable     Jx equal c_flux[1]/vol

variable     Jy equal c_flux[2]/vol

variable     Jz equal c_flux[3]/vol
variable     step equal step
variable     time equal time
variable     temp equal temp
variable     pe equal pe
variable     ke equal ke
variable     vol equal vol



fix          NPT all npt temp $T $T 100.0 iso 0.0 0.0 1000.0 
thermo_style custom step time temp v_Jx v_Jy v_Jz pe ke vol # v_k11 v_k22 v_k33
dump         position all xyz ${nsaveposition} position.init-NPT.xyz
fix          myprint all print 1 "${step} ${time} ${temp} ${Jx} ${Jy} ${Jz} ${pe} ${ke} ${vol}" file outputNPT.txt screen no
run          ${ninitialize}
undump       position
unfix        NPT

fix          NVT all nvt temp $T $T ${Tdamp}
thermo_style custom step time temp v_Jx v_Jy v_Jz pe ke vol # v_k11 v_k22 v_k33
# fix          NVE all nve
# fix          NVT all langevin $T $T ${Tdamp} 52752

dump         position all xyz ${nsaveposition} position.init-NVT.xyz
fix          myprint all print 1 "${step} ${time} ${temp} ${Jx} ${Jy} ${Jz} ${pe} ${ke} ${vol}" file outputNVT.txt screen no

run          ${ninitialize}

undump       position
unfix       NVT


# unfix        NVT

write_restart restart.0

# thermal conductivity calculation -----------------------------------------

reset_timestep 0

fix          NVE all nve
# fix          NVT all langevin $T $T ${Tdamp} 52752

# fix          JJ all ave/correlate $s $p $d &
             c_flux[1] c_flux[2] c_flux[3] type auto file J0Jt.dat ave running

# variable     scale equal (${kcal2j}*${kcal2j}/${fs2s}/${A2m})/${kB}/$T/$T/vol*$s*${dt}

# variable     k11 equal trap(f_JJ[3])*${scale}

# variable     k22 equal trap(f_JJ[4])*${scale} 

# variable     k33 equal trap(f_JJ[5])*${scale}

thermo_style custom step time temp v_Jx v_Jy v_Jz pe ke vol # v_k11 v_k22 v_k33

variable     step equal step
variable     time equal time
variable     temp equal temp
variable     pe equal pe
variable     ke equal ke

# fix          myprint all print 1 "${step} ${time} ${temp} ${Jx} ${Jy} ${Jz} ${k11} ${k22} ${k33}" file output.txt screen no
fix          myprint all print 1 "${step} ${time} ${temp} ${Jx} ${Jy} ${Jz} ${pe} ${ke} ${vol}" file output.txt screen no

dump         position all xyz ${nrun} position.run.xyz

run          100000
run          ${nrun}

# variable     k equal (v_k11+v_k22+v_k33)/3.0

# variable     ndens equal count(all)/vol

print        "Finished" # "average conductivity: $k[W/mK] @ $T K, ${ndens} /A^3, $V[A^3]" 

write_restart restart.1
